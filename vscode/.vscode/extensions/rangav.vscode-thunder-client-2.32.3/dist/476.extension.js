"use strict";exports.id=476,exports.ids=[476],exports.modules={1063:(e,s,o)=>{o.d(s,{fromSSO:()=>u});var t=o(61),n=o(62);var r=o(70);const i="To refresh this SSO session run 'aws sso login' with the corresponding profile.",a=async(e,s,t={})=>{const{CreateTokenCommand:n}=await o.e(945).then(o.bind(o,1070)),r=await(async(e,s={})=>{const{SSOOIDCClient:t}=await o.e(945).then(o.bind(o,1070));return new t(Object.assign({},s.clientConfig??{},{region:e??s.clientConfig?.region,logger:s.clientConfig?.logger??s.parentClientConfig?.logger}))})(s,t);return r.send(new n({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},c=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new t.Jh(`Token is expired. ${i}`,!1)},l=(e,s,o=!1)=>{if(void 0===s)throw new t.Jh(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${i}`,!1)};var w=o(10);const{writeFile:f}=w.promises,g=new Date(0),d=(e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers - fromSso");const s=await(0,n.YU)(e),o=(0,n.Bz)(e),r=s[o];if(!r)throw new t.Jh(`Profile '${o}' could not be found in shared credentials file.`,!1);if(!r.sso_session)throw new t.Jh(`Profile '${o}' is missing required property 'sso_session'.`);const w=r.sso_session,d=(await(0,n.qw)(e))[w];if(!d)throw new t.Jh(`Sso session '${w}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!d[e])throw new t.Jh(`Sso session '${w}' is missing required property '${e}'.`,!1);d.sso_start_url;const h=d.sso_region;let S;try{S=await(0,n.vf)(w)}catch(e){throw new t.Jh(`The SSO session token associated with profile=${o} was not found or is invalid. ${i}`,!1)}l("accessToken",S.accessToken),l("expiresAt",S.expiresAt);const{accessToken:u,expiresAt:p}=S,y={token:u,expiration:new Date(p)};if(y.expiration.getTime()-Date.now()>3e5)return y;if(Date.now()-g.getTime()<3e4)return c(y),y;l("clientId",S.clientId,!0),l("clientSecret",S.clientSecret,!0),l("refreshToken",S.refreshToken,!0);try{g.setTime(Date.now());const s=await a(S,h,e);l("accessToken",s.accessToken),l("expiresIn",s.expiresIn);const o=new Date(Date.now()+1e3*s.expiresIn);try{await((e,s)=>{const o=(0,n.C9)(e),t=JSON.stringify(s,null,2);return f(o,t)})(w,{...S,accessToken:s.accessToken,expiresAt:o.toISOString(),refreshToken:s.refreshToken})}catch(e){}return{token:s.accessToken,expiration:o}}catch(e){return c(y),y}},h=!1,S=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:i,ssoRegion:a,ssoRoleName:c,ssoClient:l,clientConfig:w,parentClientConfig:f,profile:g,logger:S})=>{let u;const p="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await d({profile:g})();u={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new t.C1(e.message,{tryNextLink:h,logger:S})}else try{u=await(0,n.vf)(e)}catch(e){throw new t.C1(`The SSO session associated with this profile is invalid. ${p}`,{tryNextLink:h,logger:S})}if(new Date(u.expiresAt).getTime()-Date.now()<=0)throw new t.C1(`The SSO session associated with this profile has expired. ${p}`,{tryNextLink:h,logger:S});const{accessToken:y}=u,{SSOClient:k,GetRoleCredentialsCommand:_}=await o.e(736).then(o.bind(o,1069)),m=l||new k(Object.assign({},w??{},{logger:w?.logger??f?.logger,region:w?.region??a}));let C;try{C=await m.send(new _({accountId:i,roleName:c,accessToken:y}))}catch(e){throw new t.C1(e,{tryNextLink:h,logger:S})}const{roleCredentials:{accessKeyId:T,secretAccessKey:x,sessionToken:O,expiration:N,credentialScope:$,accountId:I}={}}=C;if(!(T&&x&&O&&N))throw new t.C1("SSO returns an invalid temporary credential.",{tryNextLink:h,logger:S});const D={accessKeyId:T,secretAccessKey:x,sessionToken:O,expiration:new Date(N),...$&&{credentialScope:$},...I&&{accountId:I}};return s?(0,r.g)(D,"CREDENTIALS_SSO","s"):(0,r.g)(D,"CREDENTIALS_SSO_LEGACY","u"),D},u=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:s,ssoAccountId:o,ssoRegion:r,ssoRoleName:i,ssoSession:a}=e,{ssoClient:c}=e,l=(0,n.Bz)(e);if(s||o||r||i||a){if(s&&o&&r&&i)return S({ssoStartUrl:s,ssoSession:a,ssoAccountId:o,ssoRegion:r,ssoRoleName:i,ssoClient:c,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:l});throw new t.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{const o=(await(0,n.YU)(e))[l];if(!o)throw new t.C1(`Profile ${l} was not found.`,{logger:e.logger});if(!(w=o)||"string"!=typeof w.sso_start_url&&"string"!=typeof w.sso_account_id&&"string"!=typeof w.sso_session&&"string"!=typeof w.sso_region&&"string"!=typeof w.sso_role_name)throw new t.C1(`Profile ${l} is not configured with SSO credentials.`,{logger:e.logger});if(o?.sso_session){const i=(await(0,n.qw)(e))[o.sso_session],a=` configurations in profile ${l} and sso-session ${o.sso_session}`;if(r&&r!==i.sso_region)throw new t.C1("Conflicting SSO region"+a,{tryNextLink:!1,logger:e.logger});if(s&&s!==i.sso_start_url)throw new t.C1("Conflicting SSO start_url"+a,{tryNextLink:!1,logger:e.logger});o.sso_region=i.sso_region,o.sso_start_url=i.sso_start_url}const{sso_start_url:i,sso_account_id:a,sso_region:f,sso_role_name:g,sso_session:d}=((e,s)=>{const{sso_start_url:o,sso_account_id:n,sso_region:r,sso_role_name:i}=e;if(!(o&&n&&r&&i))throw new t.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e})(o,e.logger);return S({ssoStartUrl:i,ssoSession:d,ssoAccountId:a,ssoRegion:f,ssoRoleName:g,ssoClient:c,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:l})}var w}}};